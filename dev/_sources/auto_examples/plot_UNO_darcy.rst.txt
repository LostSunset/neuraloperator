
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_UNO_darcy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_UNO_darcy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_UNO_darcy.py:


U-NO on Darcy-Flow
==================

In this example, we demonstrate how to train a U-shaped Neural Operator on 
the small Darcy-Flow example we ship with the package

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: default



    import torch
    import matplotlib.pyplot as plt
    import sys
    from neuralop.models import TFNO, UNO
    from neuralop import Trainer
    from neuralop.datasets import load_darcy_flow_small
    from neuralop.utils import count_params
    from neuralop import LpLoss, H1Loss

    device = 'cpu'









.. GENERATED FROM PYTHON SOURCE LINES 26-27

Loading the Darcy Flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 27-45

.. code-block:: default

    train_loader, test_loaders, output_encoder = load_darcy_flow_small(
            n_train=1000, batch_size=32, 
            test_resolutions=[16, 32], n_tests=[100, 50],
            test_batch_sizes=[32, 32],
    )



    model = UNO(3,1, hidden_channels=64, projection_channels=64,uno_out_channels = [32,64,64,64,32], \
                uno_n_modes= [[16,16],[8,8],[8,8],[8,8],[16,16]], uno_scalings=  [[1.0,1.0],[0.5,0.5],[1,1],[2,2],[1,1]],\
                horizontal_skips_map = None, n_layers = 5, domain_padding = 0.2)
    model = model.to(device)

    n_params = count_params(model)
    print(f'\nOur model has {n_params} parameters.')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UnitGaussianNormalizer init on 1000, reducing over [0, 1, 2, 3], samples of shape [1, 16, 16].
       Mean and std of shape torch.Size([1, 1, 1]), eps=1e-05
    Loading test db at resolution 32 with 50 samples and batch-size=32

    Our model has 1738177 parameters.




.. GENERATED FROM PYTHON SOURCE LINES 46-47

Create the optimizer

.. GENERATED FROM PYTHON SOURCE LINES 47-53

.. code-block:: default

    optimizer = torch.optim.Adam(model.parameters(), 
                                    lr=8e-3, 
                                    weight_decay=1e-4)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)









.. GENERATED FROM PYTHON SOURCE LINES 54-55

Creating the losses

.. GENERATED FROM PYTHON SOURCE LINES 55-62

.. code-block:: default

    l2loss = LpLoss(d=2, p=2)
    h1loss = H1Loss(d=2)

    train_loss = h1loss
    eval_losses={'h1': h1loss, 'l2': l2loss}









.. GENERATED FROM PYTHON SOURCE LINES 63-74

.. code-block:: default



    print('\n### MODEL ###\n', model)
    print('\n### OPTIMIZER ###\n', optimizer)
    print('\n### SCHEDULER ###\n', scheduler)
    print('\n### LOSSES ###')
    print(f'\n * Train: {train_loss}')
    print(f'\n * Test: {eval_losses}')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ### MODEL ###
     UNO(
      (domain_padding): DomainPadding()
      (lifting): MLP(
        (fcs): ModuleList(
          (0): Conv2d(3, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (fno_blocks): ModuleList(
        (0): FNOBlocks(
          (convs): SpectralConv(
            (weight): ModuleList(
              (0-1): 2 x ComplexDenseTensor(shape=torch.Size([64, 32, 8, 8]), rank=None)
            )
          )
          (fno_skips): ModuleList(
            (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (1): FNOBlocks(
          (convs): SpectralConv(
            (weight): ModuleList(
              (0-1): 2 x ComplexDenseTensor(shape=torch.Size([32, 64, 4, 4]), rank=None)
            )
          )
          (fno_skips): ModuleList(
            (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (2-3): 2 x FNOBlocks(
          (convs): SpectralConv(
            (weight): ModuleList(
              (0-1): 2 x ComplexDenseTensor(shape=torch.Size([64, 64, 4, 4]), rank=None)
            )
          )
          (fno_skips): ModuleList(
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
        (4): FNOBlocks(
          (convs): SpectralConv(
            (weight): ModuleList(
              (0-1): 2 x ComplexDenseTensor(shape=torch.Size([64, 32, 8, 8]), rank=None)
            )
          )
          (fno_skips): ModuleList(
            (0): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
        )
      )
      (horizontal_skips): ModuleDict()
      (projection): MLP(
        (fcs): ModuleList(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )

    ### OPTIMIZER ###
     Adam (
    Parameter Group 0
        amsgrad: False
        betas: (0.9, 0.999)
        capturable: False
        differentiable: False
        eps: 1e-08
        foreach: None
        fused: None
        initial_lr: 0.008
        lr: 0.008
        maximize: False
        weight_decay: 0.0001
    )

    ### SCHEDULER ###
     <torch.optim.lr_scheduler.CosineAnnealingLR object at 0x7f7fc4514040>

    ### LOSSES ###

     * Train: <neuralop.training.losses.H1Loss object at 0x7f7fc4514670>

     * Test: {'h1': <neuralop.training.losses.H1Loss object at 0x7f7fc4514670>, 'l2': <neuralop.training.losses.LpLoss object at 0x7f7fc45142e0>}




.. GENERATED FROM PYTHON SOURCE LINES 75-76

Create the trainer

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default

    trainer = Trainer(model, n_epochs=20,
                      device=device,
                      mg_patching_levels=0,
                      wandb_log=False,
                      log_test_interval=3,
                      use_distributed=False,
                      verbose=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on regular inputs (no multi-grid patching).




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Actually train the model on our small Darcy-Flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 87-98

.. code-block:: default


    trainer.train(train_loader, test_loaders,
                  output_encoder,
                  model, 
                  optimizer,
                  scheduler, 
                  regularizer=False, 
                  training_loss=train_loss,
                  eval_losses=eval_losses)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training on 1000 samples
    Testing on [50, 50] samples         on resolutions [16, 32].
    Training on raw inputs of size x.shape=torch.Size([32, 3, 16, 16]), y.shape=torch.Size([32, 1, 16, 16])
    .. patched inputs of size x.shape=torch.Size([32, 3, 16, 16]), y.shape=torch.Size([32, 1, 16, 16])
    Padding inputs of resolution=torch.Size([16, 16]) with padding=[3, 3], one-sided
    Raw outputs of size out.shape=torch.Size([32, 1, 16, 16])
    .. Processed (unpatched) outputs of size out.shape=torch.Size([32, 1, 16, 16])
    Padding inputs of resolution=torch.Size([32, 32]) with padding=[6, 6], one-sided
    [0] time=5.87, avg_loss=28.1727, train_err=0.5635, 16_h1=0.4584, 16_l2=0.4154, 32_h1=0.5378, 32_l2=0.4394
    [3] time=5.70, avg_loss=19.1400, train_err=0.3828, 16_h1=0.3955, 16_l2=0.3691, 32_h1=0.4620, 32_l2=0.3741
    [6] time=5.72, avg_loss=18.2896, train_err=0.3658, 16_h1=0.3742, 16_l2=0.3775, 32_h1=0.4505, 32_l2=0.3789
    [9] time=5.67, avg_loss=17.9752, train_err=0.3595, 16_h1=0.3708, 16_l2=0.3912, 32_h1=0.4631, 32_l2=0.3903
    [12] time=5.66, avg_loss=17.5901, train_err=0.3518, 16_h1=0.3703, 16_l2=0.3738, 32_h1=0.4482, 32_l2=0.3720
    [15] time=5.65, avg_loss=17.3765, train_err=0.3475, 16_h1=0.3691, 16_l2=0.3909, 32_h1=0.4565, 32_l2=0.3846
    [18] time=5.63, avg_loss=17.2645, train_err=0.3453, 16_h1=0.3684, 16_l2=0.3837, 32_h1=0.4593, 32_l2=0.3786




.. GENERATED FROM PYTHON SOURCE LINES 99-109

Plot the prediction, and compare with the ground-truth 
Note that we trained on a very small resolution for
a very small number of epochs
In practice, we would train at larger resolution, on many more samples.

However, for practicity, we created a minimal example that
i) fits in just a few Mb of memory
ii) can be trained quickly on CPU

In practice we would train a Neural Operator on one or multiple GPUs

.. GENERATED FROM PYTHON SOURCE LINES 109-146

.. code-block:: default


    test_samples = test_loaders[32].dataset

    fig = plt.figure(figsize=(7, 7))
    for index in range(3):
        data = test_samples[index]
        # Input x
        x = data['x']
        # Ground-truth
        y = data['y']
        # Model prediction
        out = model(x.unsqueeze(0).to(device)).cpu()

        ax = fig.add_subplot(3, 3, index*3 + 1)
        ax.imshow(x[0], cmap='gray')
        if index == 0: 
            ax.set_title('Input x')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 2)
        ax.imshow(y.squeeze())
        if index == 0: 
            ax.set_title('Ground-truth y')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 3)
        ax.imshow(out.squeeze().detach().numpy())
        if index == 0: 
            ax.set_title('Model prediction')
        plt.xticks([], [])
        plt.yticks([], [])

    fig.suptitle('Inputs, ground-truth output and prediction.', y=0.98)
    plt.tight_layout()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_UNO_darcy_001.png
   :alt: Inputs, ground-truth output and prediction., Input x, Ground-truth y, Model prediction
   :srcset: /auto_examples/images/sphx_glr_plot_UNO_darcy_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  57.138 seconds)


.. _sphx_glr_download_auto_examples_plot_UNO_darcy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_UNO_darcy.py <plot_UNO_darcy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_UNO_darcy.ipynb <plot_UNO_darcy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_FNO_darcy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_FNO_darcy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_FNO_darcy.py:


Training a TFNO on Darcy-Flow
=============================

In this example, we demonstrate how to use the small Darcy-Flow example we ship with the package
to train a Tensorized Fourier-Neural Operator

.. GENERATED FROM PYTHON SOURCE LINES 11-26

.. code-block:: default



    import torch
    import matplotlib.pyplot as plt
    import sys
    from neuralop.models import TFNO
    from neuralop import Trainer
    from neuralop.training import OutputEncoderCallback
    from neuralop.datasets import load_darcy_flow_small
    from neuralop.utils import count_model_params
    from neuralop import LpLoss, H1Loss

    device = 'cpu'









.. GENERATED FROM PYTHON SOURCE LINES 27-28

Loading the Navier-Stokes dataset in 128x128 resolution

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: default

    train_loader, test_loaders, output_encoder = load_darcy_flow_small(
            n_train=1000, batch_size=32, 
            test_resolutions=[16, 32], n_tests=[100, 50],
            test_batch_sizes=[32, 32],
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    UnitGaussianNormalizer init on 1000, reducing over [0, 1, 2, 3], samples of shape [1, 16, 16].
       Mean and std of shape torch.Size([1, 1, 1]), eps=1e-05
    Loading test db at resolution 32 with 50 samples and batch-size=32




.. GENERATED FROM PYTHON SOURCE LINES 36-37

We create a tensorized FNO model

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default


    model = TFNO(n_modes=(16, 16), hidden_channels=32, projection_channels=64, factorization='tucker', rank=0.42)
    model = model.to(device)

    n_params = count_model_params(model)
    print(f'\nOur model has {n_params} parameters.')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Keyword argument in_channels not specified for model TFNO, using default=3.
    Keyword argument out_channels not specified for model TFNO, using default=1.
    Keyword argument lifting_channels not specified for model TFNO, using default=256.
    Keyword argument n_layers not specified for model TFNO, using default=4.
    Keyword argument output_scaling_factor not specified for model TFNO, using default=None.
    Keyword argument max_n_modes not specified for model TFNO, using default=None.
    Keyword argument fno_block_precision not specified for model TFNO, using default=full.
    Keyword argument use_mlp not specified for model TFNO, using default=False.
    Keyword argument mlp_dropout not specified for model TFNO, using default=0.
    Keyword argument mlp_expansion not specified for model TFNO, using default=0.5.
    Keyword argument non_linearity not specified for model TFNO, using default=<built-in function gelu>.
    Keyword argument stabilizer not specified for model TFNO, using default=None.
    Keyword argument norm not specified for model TFNO, using default=None.
    Keyword argument preactivation not specified for model TFNO, using default=False.
    Keyword argument fno_skip not specified for model TFNO, using default=linear.
    Keyword argument mlp_skip not specified for model TFNO, using default=soft-gating.
    Keyword argument separable not specified for model TFNO, using default=False.
    Keyword argument joint_factorization not specified for model TFNO, using default=False.
    Keyword argument fixed_rank_modes not specified for model TFNO, using default=False.
    Keyword argument implementation not specified for model TFNO, using default=factorized.
    Keyword argument decomposition_kwargs not specified for model TFNO, using default={}.
    Keyword argument domain_padding not specified for model TFNO, using default=None.
    Keyword argument domain_padding_mode not specified for model TFNO, using default=one-sided.
    Keyword argument fft_norm not specified for model TFNO, using default=forward.
    Keyword argument SpectralConv not specified for model TFNO, using default=<class 'neuralop.layers.spectral_convolution.SpectralConv'>.

    Our model has 523257 parameters.




.. GENERATED FROM PYTHON SOURCE LINES 47-48

Create the optimizer

.. GENERATED FROM PYTHON SOURCE LINES 48-54

.. code-block:: default

    optimizer = torch.optim.Adam(model.parameters(), 
                                    lr=8e-3, 
                                    weight_decay=1e-4)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=30)









.. GENERATED FROM PYTHON SOURCE LINES 55-56

Creating the losses

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: default

    l2loss = LpLoss(d=2, p=2)
    h1loss = H1Loss(d=2)

    train_loss = h1loss
    eval_losses={'h1': h1loss, 'l2': l2loss}









.. GENERATED FROM PYTHON SOURCE LINES 64-75

.. code-block:: default



    print('\n### MODEL ###\n', model)
    print('\n### OPTIMIZER ###\n', optimizer)
    print('\n### SCHEDULER ###\n', scheduler)
    print('\n### LOSSES ###')
    print(f'\n * Train: {train_loss}')
    print(f'\n * Test: {eval_losses}')
    sys.stdout.flush()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ### MODEL ###
     TFNO(
      (fno_blocks): FNOBlocks(
        (convs): SpectralConv(
          (weight): ModuleList(
            (0-3): 4 x ComplexTuckerTensor(shape=(32, 32, 16, 9), rank=(26, 26, 13, 7))
          )
        )
        (fno_skips): ModuleList(
          (0-3): 4 x Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (lifting): MLP(
        (fcs): ModuleList(
          (0): Conv2d(3, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (projection): MLP(
        (fcs): ModuleList(
          (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )

    ### OPTIMIZER ###
     Adam (
    Parameter Group 0
        amsgrad: False
        betas: (0.9, 0.999)
        capturable: False
        differentiable: False
        eps: 1e-08
        foreach: None
        fused: None
        initial_lr: 0.008
        lr: 0.008
        maximize: False
        weight_decay: 0.0001
    )

    ### SCHEDULER ###
     <torch.optim.lr_scheduler.CosineAnnealingLR object at 0x7fef04cc43a0>

    ### LOSSES ###

     * Train: <neuralop.losses.data_losses.H1Loss object at 0x7fef04cc4160>

     * Test: {'h1': <neuralop.losses.data_losses.H1Loss object at 0x7fef04cc4160>, 'l2': <neuralop.losses.data_losses.LpLoss object at 0x7fef04cc4490>}




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Create the trainer

.. GENERATED FROM PYTHON SOURCE LINES 77-86

.. code-block:: default

    trainer = Trainer(model=model, n_epochs=20,
                      device=device,
                      callbacks=[OutputEncoderCallback(output_encoder)],             
                      wandb_log=False,
                      log_test_interval=3,
                      use_distributed=False,
                      verbose=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    using standard method to load data to device.
    using standard method to compute loss.
    self.override_load_to_device=False
    self.overrides_loss=False




.. GENERATED FROM PYTHON SOURCE LINES 87-88

Actually train the model on our small Darcy-Flow dataset

.. GENERATED FROM PYTHON SOURCE LINES 88-98

.. code-block:: default


    trainer.train(train_loader=train_loader,
                  test_loaders=test_loaders,
                  optimizer=optimizer,
                  scheduler=scheduler, 
                  regularizer=False, 
                  training_loss=train_loss,
                  eval_losses=eval_losses)









.. GENERATED FROM PYTHON SOURCE LINES 99-109

Plot the prediction, and compare with the ground-truth 
Note that we trained on a very small resolution for
a very small number of epochs
In practice, we would train at larger resolution, on many more samples.

However, for practicity, we created a minimal example that
i) fits in just a few Mb of memory
ii) can be trained quickly on CPU

In practice we would train a Neural Operator on one or multiple GPUs

.. GENERATED FROM PYTHON SOURCE LINES 109-146

.. code-block:: default


    test_samples = test_loaders[32].dataset

    fig = plt.figure(figsize=(7, 7))
    for index in range(3):
        data = test_samples[index]
        # Input x
        x = data['x']
        # Ground-truth
        y = data['y']
        # Model prediction
        out = model(x.unsqueeze(0))

        ax = fig.add_subplot(3, 3, index*3 + 1)
        ax.imshow(x[0], cmap='gray')
        if index == 0: 
            ax.set_title('Input x')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 2)
        ax.imshow(y.squeeze())
        if index == 0: 
            ax.set_title('Ground-truth y')
        plt.xticks([], [])
        plt.yticks([], [])

        ax = fig.add_subplot(3, 3, index*3 + 3)
        ax.imshow(out.squeeze().detach().numpy())
        if index == 0: 
            ax.set_title('Model prediction')
        plt.xticks([], [])
        plt.yticks([], [])

    fig.suptitle('Inputs, ground-truth output and prediction.', y=0.98)
    plt.tight_layout()
    fig.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_FNO_darcy_001.png
   :alt: Inputs, ground-truth output and prediction., Input x, Ground-truth y, Model prediction
   :srcset: /auto_examples/images/sphx_glr_plot_FNO_darcy_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 45.166 seconds)


.. _sphx_glr_download_auto_examples_plot_FNO_darcy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_FNO_darcy.py <plot_FNO_darcy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_FNO_darcy.ipynb <plot_FNO_darcy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
